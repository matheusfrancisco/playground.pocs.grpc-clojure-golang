;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC grpc_poc.proto.translate.Translation Client Implementation
;;;----------------------------------------------------------------------------------
(ns grpc_poc.proto.translate.Translation.client
  (:require [grpc_poc.proto.translate :refer :all]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn translate
  ([client params] (translate client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "grpc_poc.proto.translate.Translation"
              :method  "translate"
              :input   {:f grpc_poc.proto.translate/new-TranslationRequest :ch input}
              :output  {:f grpc_poc.proto.translate/pb->TranslationResponse :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

